
#ifdef __CUDACC__
#define cuda_SYNCTHREADS() __syncthreads()
#else
#define cuda_SYNCTHREADS()
#endif
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <cuda.h>
#include <device_functions.h>
#include <cuda_runtime_api.h>

#include <stdio.h>
#include"math.h"
#include"stdlib.h"

#define t 4
#define bl 2
#define n 8
#define m 8

__global__ void kernel(int*a, int* b, int *p, int *q) {
	int tid = threadIdx.x;
	int bid = blockIdx.x;
	__shared__ int local_sums[t];
	int slice_row = n / bl;
	int start_row = bid * slice_row;
	int end_row = start_row + slice_row;
	if (bid == bl - 1) {
		end_row += n % bl;
	}
	int slice_col = m / t;
	int start_col = tid * slice_col;
	int end_col = start_col + slice_col;
	if (tid == t - 1) {
		end_col += m % t;
	}


	for (int i = start_row; i < end_row; i++) {
		int tmp_sum = 0;
		for (int j = start_col; j < end_col; j++) {
			if (a[i*m + j] < *p)
				a[i*m + j] = *q;
			tmp_sum += a[i*m + j];
		}
		local_sums[tid] = tmp_sum;
		cuda_SYNCTHREADS();
		int half = t;
		do {
			cuda_SYNCTHREADS();
			half /= 2;
			if (tid < half) {
				local_sums[tid] += local_sums[tid + half];
			}
		} while (half != 1);
		if (tid == 0) {
			b[i] = local_sums[tid];
		}
	}

}

void main() {
	int ha[m*n], *da, hp, hq, *dp, *dq, hb[n], *db;
	printf("\n Matrica A\n");
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			ha[i*m + j] = rand() % 5;
			printf("%d ", ha[i*m + j]);
		}
		printf("\n");
	}
	printf("\n");

	cudaMalloc((void**)&da, sizeof(int)*m*n);
	cudaMalloc((void**)&dp, sizeof(int));
	cudaMalloc((void**)&dq, sizeof(int));
	cudaMalloc((void**)&db, n * sizeof(int));

	cudaMemcpy(da, ha, sizeof(int)*m*n, cudaMemcpyHostToDevice);
	cudaMemcpy(dp, &hp, sizeof(int), cudaMemcpyHostToDevice);
	cudaMemcpy(dq, &hq, sizeof(int), cudaMemcpyHostToDevice);

	kernel << < bl, t >> > (da, db, dp, dq);

	cudaMemcpy(hb, db, n * sizeof(int), cudaMemcpyDeviceToHost);
	cudaMemcpy(ha, da, sizeof(int)*m*n, cudaMemcpyDeviceToHost);

	printf("MATRICA A nakon transformacije\n");
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++)
			printf(" %d ", ha[i*m + j]);
		printf("\n");
	}

	printf("\n");

	printf("Niz B nakon transformacije\n");
	for (int i = 0; i < n; i++) {
		printf(" %d ", hb[i]);
	}
	printf("\n");
	cudaFree(da);
	cudaFree(db);
cudaFree(dp);
cudaFree(dq);
}
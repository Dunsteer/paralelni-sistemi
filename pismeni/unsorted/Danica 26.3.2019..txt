#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <math.h>

#define n 4
#define m 6
#define p 2

int main(int argc, char* argv[])
{
	int rank, a[m][n], b[n], c[m], local_a[m][n / p], local_b[n / p], local_c[m];
	int i, j, s;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	MPI_Datatype col, vec, col_resized, vec_resized, recv, recv_resized;
	MPI_Type_vector(n / p * m, 1, p, MPI_INT, &col);
	MPI_Type_commit(&col);
	MPI_Type_create_resized(col, 0, sizeof(int), &col_resized);
	MPI_Type_commit(&col_resized);

	MPI_Type_vector(n / p, 1, p, MPI_INT, &vec);
	MPI_Type_commit(&vec);
	MPI_Type_create_resized(vec, 0, sizeof(int), &vec_resized);
	MPI_Type_commit(&vec_resized);

	if (rank == 0) {
		printf("\nMATRICA A\n");
		for (i = 0; i < m; i++) {
			for (j = 0; j < n; j++) {
				a[i][j] = rand() % 3;
				printf("%d ", a[i][j]);
			}
			printf("\n");
		}

		printf("\nVEKTOR B\n");
		for (j = 0; j < n; j++) {
			b[j] = rand() % 3;
			printf("%d ", b[j]);
		}
	}

	MPI_Scatter(b, 1, vec_resized, local_b, n / p, MPI_INT, 0, MPI_COMM_WORLD);
	MPI_Scatter(a, 1, col_resized, local_a, n / p*m, MPI_INT, 0, MPI_COMM_WORLD);

	for (j = 0; j < m; j++) {
		local_c[j] = 0;
	}

	for (i = 0; i < m; i++)
		for (s = 0; s < n / p; s++)
			local_c[i] += local_a[i][s] * local_b[s];

	printf("\nMATRICA LOCAL A procesa %d\n",rank);
	for (i = 0; i < m; i++) {
		for (j = 0; j < n/p; j++) {
			printf("%d ", local_a[i][j]);
		}
		printf("\n");
	}

	printf("\nVEKTOR Local B procesa %d\n", rank);
	for (j = 0; j < n/p; j++) {
		printf("%d ", local_b[j]);
	}

	printf("\nVEKTOR Local C procesa %d\n",rank);
	for (j = 0; j < m; j++) {
		printf("%d ", local_c[j]);
	}

	MPI_Reduce(local_c, c, m, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
	if (rank == 0) {
		printf("\n----------------VEKTOR C procesa %d --------------------\n", rank);
		for (j = 0; j < m; j++) {
			printf("%d ", c[j]);
		}
	}

	MPI_Finalize();

}
#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <math.h>

#define m 4
#define k 4
#define n 4
#define p 5

int main(int argc, char* argv[])
{
	int rank, a[n][n], c[n][n], broj = n, dosad = 0;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	MPI_Datatype dijagonala, dijagonala_prijem;
	int blklen[n], dist[n];
	for (int i = 0; i < n; i++) {
		blklen[i] = i + 1;
		dist[i] = i * n;
	}
	MPI_Type_indexed(n, blklen, dist, MPI_INT, &dijagonala);
	MPI_Type_commit(&dijagonala);

	int blklen2[n*(n + 1) / 2], dist2[n*(n + 1) / 2];
	for (int i = 0; i < n*(n + 1) / 2; i++)
	{
		blklen2[i] = 1;

	}
	int cnt = 0;
	for (int i = 0; i <n; i++)
	{
		for (int j = n - 1; j >= 0; j--)
		{
			if (i == j || i < j) {
				dist2[cnt++] = i * n + j;
			}
		}
	}
	printf("BlkLen \n");
	for (int i = 0; i < n*(n + 1) / 2; i++) {
		printf("%d ", blklen2[i]);
	}
	printf("\n");

	printf("Displ \n");
	for (int i = 0; i < n*(n + 1) / 2; i++) {
		printf("%d ", dist2[i]);
	}
	printf("\n");

	MPI_Type_indexed(n*(n + 1) / 2, blklen2, dist2, MPI_INT, &dijagonala_prijem);
	MPI_Type_commit(&dijagonala_prijem);

	if (rank == 0) {
		printf("\nMATRICA A\n");
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				a[i][j] = rand() % 10;
				printf("%d ", a[i][j]);
			}
			printf("\n");
		}

		for (int i = 1; i < p; i++) {
			MPI_Send(a, 1, dijagonala, i, 0, MPI_COMM_WORLD);
		}
	}
	else {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				c[i][j] = 0;
			}
		}
		MPI_Status status;
		MPI_Recv(c, 1, dijagonala_prijem, 0, 0, MPI_COMM_WORLD, &status);
		printf("\nMATRICA C u procesu %d\n", rank);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				printf("%d ", c[i][j]);
			}
			printf("\n");
		}
	}

	MPI_Finalize();

}

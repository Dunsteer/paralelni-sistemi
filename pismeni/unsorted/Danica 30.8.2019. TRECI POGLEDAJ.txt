//#include <stdio.h>
//#include <mpi.h>
//#include <stdlib.h>
//#include <math.h>
//
//#define n 8
//#define p 16 
//#define q 4
//
//
//int main(int argc, char* argv[])
//{
//	int i, j, k, rank, size, a[n][n], b[n], c[n], local_a[n / q][n / q], local_b[n / q], local_c[n / q];
//		int row_a[n / q][n], color, key, row_c[n / q];
//
//	MPI_Init(&argc, &argv);
//	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
//	MPI_Comm_size(MPI_COMM_WORLD, &size);
//	MPI_Status st;
//	MPI_Datatype vector, sub, sub_resized, send_rows;
//	MPI_Comm rows, cols;
//
//	MPI_Type_vector(n / q, n, n, MPI_INT, &vector);
//	MPI_Type_commit(&vector);
//	MPI_Type_create_resized(vector, 0, n / q * n * sizeof(int), &send_rows);
//	MPI_Type_commit(&send_rows);
//
//	MPI_Type_vector(n / q, n / q, n, MPI_INT, &sub);
//	MPI_Type_commit(&sub);
//	MPI_Type_create_resized(sub, 0, n / q * sizeof(int), &sub_resized);
//	MPI_Type_commit(&sub_resized);
//
//
//	if (rank == 0)
//	{
//		for (i = 0; i < n; i++)
//			for (j = 0; j < n; j++)
//				a[i][j] = i + j;
//		for (i = 0; i < n; i++)
//			b[i] = 1;
//	}
//
//	color = rank / q;
//	key = rank % q;
//	MPI_Comm_split(MPI_COMM_WORLD, color, key, &rows);
//	MPI_Comm_split(MPI_COMM_WORLD, key, color, &cols);
//
//	MPI_Scatter(a, 1, send_rows, row_a, n / q * n, MPI_INT, 0, cols);
//	MPI_Scatter(b, n / q, MPI_INT, local_b, n / q, MPI_INT, 0, rows);
//
//	MPI_Scatter(row_a, 1, sub_resized, local_a, n / q * n / q, MPI_INT, 0, rows);
//	MPI_Bcast(local_b, n / q, MPI_INT, 0, cols);
//
//	//mnozimo
//	for (i = 0; i < n / q; i++)
//		local_c[i] = 0;
//	for (i = 0; i < n / q; i++)
//		for (j = 0; j < n / q; j++)
//			local_c[i] += local_a[i][j] * local_b[j];
//
//	MPI_Reduce(local_c, row_c, n / q, MPI_INT, MPI_SUM, 0, rows);
//	MPI_Gather(row_c, n / q, MPI_INT, c, n / q, MPI_INT, 0, cols);
//
//	if (rank == 0)
//	{
//		printf("Resenje u procesu 0 je:\n");
//		for (i = 0; i < n; i++)
//			printf("%d ", c[i]);
//	}
//
//	MPI_Finalize();
//
//}



////jun 2019.

#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <math.h>

#define n 8
#define p 16 
#define q 4


int main(int argc, char* argv[])
{
	int rank, a[n][n], b[n][n], c[n][n], local_a[n / q][n], local_b[n][n / q], local_c[n / q][n / q];
	int tmp_a[n / q][n], tmp_b[n][n / q], tmp_c[n / q][n / q];
	int i, j, s;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	MPI_Datatype row, row_resized, col, col_resized;
	MPI_Type_vector(n / q, n, n, MPI_INT, &row);
	MPI_Type_commit(&row);
	MPI_Type_vector(n, n / q, n, MPI_INT, &col);
	MPI_Type_commit(&col);
	MPI_Type_create_resized(col, 0, n / q * sizeof(int), &col_resized);
	MPI_Type_commit(&col_resized);

	if (rank == 0)
	{
		printf("\nMatrica A\n");
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {
				a[i][j] = rand() % 3;
				printf("%d ", a[i][j]);
			}
			printf("\n");
		}
		printf("\nMatrica B\n");
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {
				b[i][j] = rand() % 2;
				printf("%d ", b[i][j]);
			}
			printf("\n");
		}
	}

	MPI_Comm rowcom, colcom;
	int irow, jcol;
	irow = rank / q;
	jcol = rank % q;
	MPI_Comm_split(MPI_COMM_WORLD, irow, jcol, &rowcom);
	MPI_Comm_split(MPI_COMM_WORLD, jcol, irow, &colcom);

	MPI_Scatter(a, 1, row, tmp_a, n*n / q, MPI_INT, 0, colcom);
	MPI_Bcast(tmp_a, n*n / q, MPI_INT, 0, rowcom);

	MPI_Scatter(b, 1, col_resized, tmp_b, n*n / q, MPI_INT, 0, rowcom);
	MPI_Bcast(tmp_b, n*n / q, MPI_INT, 0, colcom);

	for (i = 0; i < n / q; i++) {
		for (j = 0; j < n / q; j++) {
			tmp_c[i][j] = 0;
		}
	}

	printf("\nJa sam proces %d \n", rank);
	for (i = 0; i < n / q; i++) {
		for (j = 0; j < n / q; j++) {
			for (s = 0; s < n; s++) {
				tmp_c[i][j] += tmp_a[i][s] * tmp_b[s][j];
			}
		}
	}
	printf("\nMatrica TMP A procesa %d\n", rank);
	for (i = 0; i < n / q; i++) {
		for (j = 0; j < n; j++) {
			printf("%d ", tmp_a[i][j]);
		}
		printf("\n");
	}
	printf("\nMatrica TMP B procesa %d\n", rank);
	for (i = 0; i < n; i++) {
		for (j = 0; j < n / q; j++) {
			printf("%d ", tmp_b[i][j]);
		}
		printf("\n");
	}

	printf("\nMatrica TMP C procesa %d\n", rank);
	for (i = 0; i < n / q; i++) {
		for (j = 0; j < n / q; j++) {
			printf("%d ", tmp_c[i][j]);
		}
		printf("\n");
	}

	MPI_Reduce(tmp_c, local_c, n / q * n / q, MPI_INT, MPI_SUM, 0, rowcom);
	MPI_Gather(local_c, n / q * n / q, MPI_INT, c, n*n, MPI_INT, 0, colcom);

	if (rank == 0) {
		printf("\n----------------Matrica  C procesa %d--------------\n", rank);
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {
				printf("%d ", c[i][j]);
			}
			printf("\n");
		}
	}


	MPI_Finalize();

}
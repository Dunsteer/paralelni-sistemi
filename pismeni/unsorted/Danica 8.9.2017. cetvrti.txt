#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <math.h>

#define n 6
#define p 4

int main(int argc, char* argv[])
{
	int rank, a[n][n], c[n][n];
	int i, j;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	MPI_Datatype send, send_resized, recv;
	int blklen2[n / 2], displ2[n / 2];
	int cnt = 0;
	int starti = (rank / 2)*n / 2;
	int endi = n / 2 + starti;
	int startj = (rank % 2)*n / 2;
	for (i = starti; i < endi; i++) {
		displ2[cnt++] = i * n + startj;
	}
	for (i = 0; i < n / 2; i++) {
		blklen2[i] = n / 2;
	}
	MPI_Type_indexed(n / 2, blklen2, displ2, MPI_INT, &send);
	MPI_Type_commit(&send);

	MPI_Type_create_resized(send, 0, 0, &send_resized);
	MPI_Type_commit(&send_resized);

	for (i = 0; i < n / 2; i++)
		printf("%d ", displ2[i]);

	int blklen[2 * n / 2 * n / 2], displ[2 * n / 2 * n / 2];
	cnt = 0;
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			if ((n - 1) <= (i + j) && cnt < 2 * n / 2 * n / 2) {
				blklen[cnt] = 1;
				displ[cnt] = i * n + j;
				cnt++;
			}
		}
	}
	for (i = 0; i < 2 * n / 2 * n / 2; i++)
		printf("%d ", displ[i]);
	MPI_Type_indexed(2 * n / 2 * n / 2, blklen, displ, MPI_INT, &recv);
	MPI_Type_commit(&recv);

	if (rank == 0) {
		printf("\nMATRICA A\n");
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {
				a[i][j] = rand() % 3;
				printf("%d ", a[i][j]);
			}
			printf("\n");
		}
		for (i = 1; i < p; i++)
			MPI_Send(a, 2, send_resized, i, 0, MPI_COMM_WORLD);
	}
	else {
		for (i = 0; i < n; i++)
			for (j = 0; j < n; j++)
				c[i][j] = 0;
		MPI_Status status;
		MPI_Recv(c, 1, recv, 0, 0, MPI_COMM_WORLD, &status);
		printf("\nMATRICA C u procesu %d\n", rank);
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {
				printf("%d ", c[i][j]);
			}
			printf("\n");
		}
	}


	MPI_Finalize();

}